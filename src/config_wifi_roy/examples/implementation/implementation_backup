#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <EEPROM.h>



ESP8266WebServer server(80);
WiFiServer wifiserver(80);
IPAddress server_ip(192, 168, 0, 1);
IPAddress server_gateway(192, 168, 0, 1); // The gateway should be the same as the IP or the AP will be unstable!
IPAddress server_subnet(255, 255, 255, 0);

const char *ssid_AP = "ESP8266_AP"; // Set your own Network Name (SSID)
const char *password_AP = "12345678"; // Set your own password

String tmpSSID = "";
String tmpPass = "";

String pin5value = "0";

String noJsCss = "*{font-family: \"Trebuchet MS\";}html, body{font-size: 14px;margin: 0;padding: 0;color: lightblue;}a{background-color: #f1f2f4;border-radius: 5px;color: #666;display: block;margin: 1em;padding: 0.5em;text-decoration: none;width: max-content;transition: all 0.2s;}a:hover{background-color: LightBlue;color: #333;}";





///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////// EEPROM /////////////////////////////////////////////

/////////////////////////////////////////////////
///////////////////// READ /////////////////////

String EEPROM_READ(int addr) {
  String newString;
  int value;
  int valueSize = EEPROM.read(addr);
  for (int i = 0; i < valueSize; i++) {
    addr++;
    value = EEPROM.read(addr);
    if (value != 0) {
      newString += (char)value;
    }
  }
  return newString;
}

/////////////////////////////////////////////////
///////////////////// SAVE /////////////////////

void EEPROM_WRITE(int addr, String string) {
  int strSize = (string.length() + 1);
  char inchar[30];    // '30' Max length of string
  string.toCharArray(inchar, strSize);
  EEPROM.write(addr, strSize);
  for (int i = 0; i < strSize; i++) {
    addr++;
    EEPROM.write(addr, inchar[i]);
  }
  EEPROM.commit();
}

/////////////////////////////////////////////////
////////////////// CHECK EMPTY //////////////////

bool EEPROM_CELL_IS_EMPTY(int addr) {
  return EEPROM.read(addr) == 255;
}





///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// WiFi MODES ///////////////////////////////////////////

/////////////////////////////////////////////////
///////////////// STATION MODE /////////////////

void ESP_STATION(ESP8266WebServer &server) {

  Serial.println("Closing server...");
  
  server.stop(); ///// DEBUGGING... ???
  server.close(); ///// DEBUGGING... ???
  WiFi.mode(WIFI_STA); ///// DEBUGGING... uncomment if using one of the above
  
  // WiFi.softAPdisconnect(true) ? Serial.println("Server closed.") : Serial.println("Fail closing server."); ///// DEBUGGING... ('true' to remove the AP mode ??? BUT SETS MODE TO NULL ???)

  /* NO BLINK */
}

/////////////////////////////////////////////////
////////// STATION + ACCESS POINT MODE //////////

// void ESP_AP_STA(ESP8266WebServer *server) {
void ESP_AP_STA(ESP8266WebServer &server) {

  WiFi.mode(WIFI_AP_STA);

  Serial.println("Starting server...");
  
  WiFi.softAPConfig(server_ip, server_gateway, server_subnet) || Serial.println("Error configuring Access Point."); // On ESP32 you have to wait until event SYSTEM_EVENT_AP_START has fired, before you can set its configuration. // es necesario llamar a WiFi.softAPConfig() antes de WiFi.softAP()
  WiFi.softAP(ssid_AP, password_AP) || Serial.println("Error setting up Access Point.");

  Serial.print("AP dirección IP: ");
  Serial.print(WiFi.softAPIP());
  Serial.println(" (esta IP apunta al WeMos cuando te conectas a su propio WiFi)");
  Serial.print("AP MAC Address: ");
  Serial.println(WiFi.softAPmacAddress());

  server.begin();
  Serial.println("Server started. Access Point SSID: " + String(ssid_AP));
  // server.setNoDelay(true);

  /* SLOW BLINK */
}





///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// CONNECTION ///////////////////////////////////////////

/////////////////////////////////////////////////
/////////////// WiFi FROM MEMORY ///////////////

void connectWiFi() {
  int timer = 10; // Seconds
  int blinkRate = 10; // Bigger = faster

  String r_ssid = EEPROM_READ(1);
  String r_pass = EEPROM_READ(30);
  Serial.print("SSID: ");
  Serial.println(r_ssid);
  Serial.print("Password: ");
  Serial.println(r_pass);

  WiFi.begin(r_ssid, r_pass);

  Serial.print("Connecting...");

  timer = timer * blinkRate;
  while (timer > 0) {
    yield(); // To don't stop the "EventLoop" (keep running background tasks) ***SHOULD BE INSIDE A LOOP (do, while, for...)? (or loop() ??) ***

    digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN) );
    Serial.print(".");

    if (WiFi.status() == WL_CONNECTED) {
      timer = 0;

      // Se conectó al WIFI
      WiFi.setAutoReconnect(true); ///// DEBUGGING... Caused a restart loop ?
      // WiFi.setAutoConnect(true); ///// ??? whats the difference ??? DEBUGGING... Caused a restart loop ?
      Serial.println("WiFi conectada.");
      Serial.println();
      WiFi.printDiag(Serial);
      Serial.println();
      Serial.print("STA dirección IP: ");
      Serial.print(WiFi.localIP());
      Serial.println(" (esta IP apunta al WeMos cuando estas conectado al modem en red local)");
      Serial.print("STA MAC Address: ");
      Serial.println(WiFi.macAddress());

      /* LED ON */
    } else {
      if (timer == 1) {

        /* LED OFF */

        if (tmpSSID != "") {
          EEPROM_WRITE(1, tmpSSID);
          EEPROM_WRITE(30, tmpPass);
          tmpSSID = "";
          tmpPass = "";
        }

        Serial.println( String("WiFi no conectado. Status: ") + getNetStatus() );
      }

    }

    delay(1000 / blinkRate);
    timer--;
  }
}

/////////////////////////////////////////////////
///////////////// SCAN NETWORKS /////////////////

String getNetworks(String prefix = "", String suffix = "", String separator = "") {
  
  String networks = "";
  
  for (int i = 0; i < WiFi.scanNetworks(); ++i) {

    yield(); // DOES NOTHING IN HERE...
    
    // Print SSID and RSSI for each network found
    if(true) { // true to debug
      Serial.print(i + 1);
      Serial.print(": ");
      Serial.print(WiFi.SSID(i));
      Serial.print(" (");
      Serial.print(WiFi.RSSI(i));
      Serial.print(")");
      Serial.println((WiFi.encryptionType(i) == ENC_TYPE_NONE) ? " " : "*");
    }

    networks += i == 0 ? "" : separator;
    networks += prefix + WiFi.SSID(i) + suffix;
  }

  return networks;
}

/////////////////////////////////////////////////
////////////// GET NETWORK STATUS //////////////

String getNetStatus() {

  switch( WiFi.status() ) {
    case WL_CONNECTED:
      return "Connected";

    case WL_NO_SHIELD:
      return "No WiFi shield present";

    case WL_IDLE_STATUS:
      return "Connecting...";

    case WL_NO_SSID_AVAIL:
      return "SSID unreachable";

    case WL_SCAN_COMPLETED:
      return "Scan completed";

    case WL_CONNECT_FAILED:
      return "Connection failed";

    case WL_CONNECTION_LOST:
      return "Connection lost";

    case WL_DISCONNECTED:
      return "Disconnected";

    // case WL_CONNECT_WRONG_PASSWORD:
      // return "Wrong password";

    default:
      return "Getting status...";
  }

}





///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////// HELPERS /////////////////////////////////////////////

/////////////////////////////////////////////////
//////////////// DETECT CHANGES ////////////////

bool changed(String gotStat, String &compareVar) {
  if(gotStat != compareVar){
    compareVar = gotStat;
    return true;
  } else {
    compareVar = gotStat;
    return false;
  }
}





///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////// SETUP //////////////////////////////////////////////

void setup() {
  ///// SETUP RUNS ONLY ON 'RESTART' (qhen you click on restart button) /////
  ///// SETUP DOEN NOT RUN WHEN YOU PLUG AGAIN THE WeMos /////
  // put your setup code here, to run once:
  Serial.begin(115200);
  EEPROM.begin(4096);
  Serial.print("...STARTING...");
  Serial.println();

  pinMode(LED_BUILTIN, OUTPUT);     // Initialize the LED_BUILTIN pin as an output
  pinMode(5, INPUT);     // Initialize the DIGITAL 5 pin as an input

  server.on("/", []() {
    server.send(200, "text/html", String("<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><style type=\"text\/css\">*{font-family: \"Trebuchet MS\";}*:focus{outline: none;}html, body{background-color: #F1F2F4;font-size: 14px;margin: 0;padding: 0;}.WiFi_selector{background-color: #F1F2F4;border-radius: 5px;box-shadow: 0px 10px 20px 0 rgba(0, 0, 0, 0.1);margin-left: auto;margin-right: auto;margin-top: 100px;padding: 1em;width: min-content;}.WiFi_selector *:not(:first-child){margin-top: 2em;}.WiFi_selector a{color: lightblue;display: block;margin-top: 1em !important;text-decoration: none;width: max-content;transition: all 0.2s;}.WiFi_selector label{display: block;}.WiFi_selector label *:not(:first-child){margin-top: 1em;}.WiFi_selector label input,.WiFi_selector label select{color: #666;}.WiFi_selector label .l_title{color: #999;letter-spacing: 0.2em;}.WiFi_selector input,.WiFi_selector select{-moz-box-sizing: border-box;-webkit-box-sizing: border-box;border-radius: 5px;border: 1px solid #F1F2F4;box-sizing: border-box;min-width: 20em;padding: 1em;transition: all 0.2s;width: 100%;}.WiFi_selector input:hover,.WiFi_selector select:hover{box-shadow: inset 0px 5px 10px 0 rgba(0, 0, 0, 0.1);}.WiFi_selector input:focus,.WiFi_selector select:focus{border-color: LightBlue;}.WiFi_selector .send{background-color: #999;color: #EEE;cursor: pointer;letter-spacing: 0.2em;transition: all 0.2s;}.WiFi_selector .send:hover{background-color: #666;box-shadow: 0px 5px 10px 0 rgba(0, 0, 0, 0.1);}.WiFi_selector .send:focus{background-color: #666;border-color: #F1F2F4;}.WiFi_selector .send:active{box-shadow: inset 0px 5px 10px 0 rgba(0, 0, 0, 0.1);color: LightBlue;}.output{-moz-box-sizing: border-box;-webkit-box-sizing: border-box;background-color: #333;border-radius: 5px;border: none;box-shadow: inset 0px 5px 10px 0 rgba(0, 0, 0, 0.1);box-sizing: border-box;color: #999;padding: 1em;}<\/style><title>WiFi Config<\/title><\/head><body><div class=\"WiFi_selector\"><form action=\"config\" method=\'GET\' target=\"response\" id=\"form\" autocomplete=\"off\"><div><label><div class=\"l_title\">Network Name:<\/div><input list=\"networks\" name=\"ssid\"><\/label><datalist id=\"networks\">")
      + ( server.arg("scan") == "1" ? getNetworks("<option value=\"", "\">", "\r\n") : "" )
      + "<\/datalist><a href=\"?scan=1\">Scan networks...<\/a><\/div><div><label><div class=\"l_title\">Password:<\/div><input type=\"password\" name=\"password\"><\/label><\/div><div><input type=\"submit\" name=\"submit\" class=\"send\" value=\"CONNECT\"><\/div><div class=\"output\"><span style=\"color: LightBlue;\" id=\"outputTxt\">No Js<\/span><noscript><iframe src=\"\/status\/html\" id=\'response\' name=\'response\' style=\"border:none;\"><\/iframe><br><br><small><b>Your browser does not support JavaScript!<\/b><br>Manually click to get the connection status.<\/small><\/noscript><\/div><\/form><\/div><script>const form=document.getElementById(\"form\"),opt=document.getElementById(\"outputTxt\");function ajaxReq(){return window.XMLHttpRequest?new XMLHttpRequest:window.ActiveXObject?new ActiveXObject(\"Microsoft.XMLHTTP\"):(alert(\"Browser does not support XMLHTTP.\"),!1)}function getStatus(){const t=ajaxReq();t.open(\"GET\",\"\/status\/json\",!0),t.send(),t.onreadystatechange=(()=>{if(opt.innerHTML=\"Getting status...\",4==t.readyState)if(t.status>=200&&t.status<300)try{const e=JSON.parse(t.response);\"Connected\"==e.status?opt.innerHTML=`${e.status} to ${e.info.ssid}`:opt.innerHTML=e.status,setTimeout(getStatus,1e3)}catch(e){opt.innerHTML=\"Error. Check console.\",console.error(e),console.log(t.response)}else opt.innerHTML=\"Error connecting to AP.\",setTimeout(getStatus,5e3)})}form.addEventListener(\"submit\",t=>{t.preventDefault(),opt.innerHTML=\"Sending data...\";const e=ajaxReq();e.open(\"GET\",encodeURI(`\/config?ssid=${form.ssid.value}&password=${form.password.value}`),!0),e.send(),e.onreadystatechange=(()=>{4==e.readyState&&(e.status<200||e.status>=300)&&(console.log(\"Error sending data.\"),opt.innerHTML=\"Error sending data.\")})}),window.onload=(()=>{getStatus()});<\/script><\/body><\/html>");
  });

  server.on("/status/json", []() {
    server.send(200, "application/json", String("{\"status\":\"") + getNetStatus() + "\"" + (WiFi.isConnected() ? ",\"info\":{\"ssid\":\"" + EEPROM_READ(1) + "\"}}" : "}") );
  });

  server.on("/status/html", []() {
    server.send(200, "text/html", String("<!DOCTYPE html><html><head><meta charset=\"utf-8\"><noscript><meta http-equiv=\"refresh\" content=\"1\"><\/noscript><title><\/title><style type=\"text\/css\">")
      + noJsCss
      + "<\/style><\/head><body>"
      + getNetStatus()
      + (WiFi.isConnected() ? (" to " + EEPROM_READ(1) ) : "" )
      + "<br><a href=\"\/status\/html\">Click here to update status.<\/a><\/body><\/html>" );
  });

  server.on("/config", []() {
    server.send(200, "text/html", String("<!DOCTYPE html><html><head><meta charset=\"utf-8\"><noscript><meta http-equiv=\"refresh\" content=\"3;URL=\'\/status\/html\'\"><\/noscript><title><\/title><style type=\"text\/css\">")
      + noJsCss
      + "<\/style><\/head><body>Data received!<br><a href=\"\/status\/html\">Click here to get status.<\/a><\/body><\/html>" );

    if( !EEPROM_CELL_IS_EMPTY(1) ) {
      tmpSSID = EEPROM_READ(1);
      tmpPass = EEPROM_READ(30);
    }

    EEPROM_WRITE(1, server.arg("ssid")); // Receive GET values via URL query
    EEPROM_WRITE(30, server.arg("password"));

    connectWiFi();
  });


  if ( !EEPROM_CELL_IS_EMPTY(1) ) {
    Serial.println("Found SSID in memory... Trying to connect...");
    connectWiFi();
  } else {
    Serial.println("No SSID in memory... Starting server.");
    ESP_AP_STA(server);
  }
}





///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////// LOOP //////////////////////////////////////////////

void loop() {
  // put your main code here, to run repeatedly:
  
  server.handleClient();
  
  if (WiFi.status() == WL_CONNECTED) {
    // Do while WiFi is connected
    //Serial.println("WiFi connected");
  } else {
    // Do while WiFi is NOT connected
    //Serial.println("disconnected");
  }

  if ( changed((String)digitalRead(5), pin5value) ) {
    Serial.print("cambio pin 5 a: ");
    Serial.println(pin5value);
    pin5value == "1" ? ESP_AP_STA(server) : ESP_STATION(server);
  }
  
}
