#include "config_wifi_roy.h"


int EEPROM_ADDR_CONNECTED_SSID = 0;
int EEPROM_ADDR_CONNECTED_PASSWORD = 0;

String tmpSSID = "";
String tmpPass = "";

// const char *ssid_AP = ""; // Set your own Network Name (SSID)
// const char *password_AP = ""; // Set your own password

IPAddress server_ip(192, 168, 0, 1);
IPAddress server_gateway(192, 168, 0, 1); // The gateway should be the same as the IP or the AP will be unstable!
IPAddress server_subnet(255, 255, 255, 0);

byte wifiConnected;

/***** SET RECONNECT TIMER *****/
unsigned long rec_timestamp = millis();
unsigned int  rec_track = 0;
unsigned int  rec_timeout = 1 * 60 * 1000; // 1 minute





/////////////////////////////////////////////////
///////////////// CONFIG SERVER /////////////////

void setupWifiConfigServer(ESP8266WebServer &server, int EEPROM_ADDR_FOR_SSID, int EEPROM_ADDR_FOR_PASSWORD) {

	WiFi.setAutoReconnect(false); // Establece si el módulo intentará volver a conectarse a un punto de acceso en caso de que esté desconectado.
	WiFi.setAutoConnect(false); // Configura el módulo para conectarse automáticamente tras encenderse al último punto de acceso utilizado.

	EEPROM_ADDR_CONNECTED_SSID = EEPROM_ADDR_FOR_SSID;
	EEPROM_ADDR_CONNECTED_PASSWORD = EEPROM_ADDR_FOR_PASSWORD;



	server.on("/", [&]() {
		server.send(200, "text/html", String(WIFI_ROY_MAIN_1)
			+ ( server.arg("scan") == "1" ? getNetworks(WIFI_ROY_FOUND_NETWORK_PRE, WIFI_ROY_FOUND_NETWORK_POST, WIFI_ROY_FOUND_NETWORK_SEPARATOR) : "" )
			+ WIFI_ROY_MAIN_2);
	});

	server.on("/status/json", [&]() {
		server.send(200, "application/json", String("{\"status\":\"") + getNetStatus() + "\"" + (WiFi.isConnected() ? ",\"info\":{\"ssid\":\"" + EEPROM_READ(EEPROM_ADDR_CONNECTED_SSID) + "\"}}" : "}") );
	});

	server.on("/status/html", [&]() {
		server.send(200, "text/html", String(WIFI_ROY_STATUS_HTML_1)
			+ WIFI_ROY_NO_JS_CSS
			+ WIFI_ROY_STATUS_HTML_2
			+ getNetStatus()
			+ (WiFi.isConnected() ? (" to " + EEPROM_READ(EEPROM_ADDR_CONNECTED_SSID) ) : "" )
			+ WIFI_ROY_STATUS_HTML_3
		);
	});

	server.on("/config", [&]() {
		server.send(200, "text/html", String(WIFI_ROY_CONFIG_1)
			+ WIFI_ROY_NO_JS_CSS
			+ WIFI_ROY_CONFIG_2
		);

		if( !EEPROM_CELL_IS_EMPTY(EEPROM_ADDR_CONNECTED_SSID) ) {
			tmpSSID = EEPROM_READ(EEPROM_ADDR_CONNECTED_SSID);
			tmpPass = EEPROM_READ(EEPROM_ADDR_CONNECTED_PASSWORD);
		}

		// Receive GET values via URL query
		EEPROM_WRITE(EEPROM_ADDR_CONNECTED_SSID, server.arg("ssid"));
		EEPROM_WRITE(EEPROM_ADDR_CONNECTED_PASSWORD, server.arg("password"));

		connectWiFi();
	});


	if ( !EEPROM_CELL_IS_EMPTY(EEPROM_ADDR_CONNECTED_SSID) ) {
		Serial.println("Found SSID in memory... Trying to connect...");
		connectWiFi();
	}
}





/////////////////////////////////////////////////
///////////////////// LOOP /////////////////////

void wifiConfigLoop(ESP8266WebServer &server) {
	
	server.handleClient();

	// LED CONTROLL
	handleLedBlink();

	if ( WiFi.getMode() == WIFI_AP_STA ) {
		setLedBlink(100);
	} else {
		if ( WiFi.isConnected() ) {
			setLedOn();
		} else {
			setLedBlink(1000);
		}
	}




	if (WiFi.status() != WL_CONNECTED) {

		if ( millis() != rec_timestamp ) { // "!=" intead of ">" tries to void possible bug when millis goes back to 0
			rec_track++;
			rec_timestamp = millis();
		}
		
		if ( rec_track > rec_timeout ) {
			// DO TIMEOUT!
			rec_track = 0;

			Serial.println("Reconnecting...");

			// try to reconnect to the previously connected access point:
			WiFi.reconnect();

			// Or, you can call WiFi.disconnect() followed by WiFi.begin(ssid,password).
			/*WiFi.disconnect();
			if ( !EEPROM_CELL_IS_EMPTY(EEPROM_ADDR_CONNECTED_SSID) ) {
				String r_ssid = EEPROM_READ(EEPROM_ADDR_CONNECTED_SSID);
				String r_pass = EEPROM_READ(EEPROM_ADDR_CONNECTED_PASSWORD);
				WiFi.begin(r_ssid, r_pass);
			}*/
		}

	}

	if ( wifiStatChanged(wifiConnected) ) {

		Serial.print("WiFi status changed to: ");
		Serial.print( WiFi.status() );
		Serial.print(" | ");
		Serial.println( getNetStatus() );

		if ( WiFi.isConnected() ) {
			// Se conectó al WIFI
			Serial.println();
			WiFi.printDiag(Serial);
			Serial.println();
			Serial.print("STA dirección IP: ");
			Serial.print(WiFi.localIP());
			Serial.println(" (esta IP apunta al WeMos cuando estas conectado al modem en red local)");
			Serial.print("STA MAC Address: ");
			Serial.println(WiFi.macAddress());
		}
	}

}



/////////////////////////////////////////////////
/////////// DETECT WIFI STATUS CHANGE ///////////

bool wifiStatChanged(byte &compareVar) {
	byte gotStat = WiFi.status();
	if(gotStat != compareVar){
		compareVar = gotStat;
		return true;
	} else {
		return false;
	}
}





///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// CONNECTION ///////////////////////////////////////////

/////////////////////////////////////////////////
/////////////// WiFi FROM MEMORY ///////////////

void connectWiFi() {
	//int timer = 10; // Seconds
	//int blinkRate = 10; // Bigger = faster

	String r_ssid = EEPROM_READ(EEPROM_ADDR_CONNECTED_SSID);
	String r_pass = EEPROM_READ(EEPROM_ADDR_CONNECTED_PASSWORD);
	Serial.print("SSID: ");
	Serial.println(r_ssid);
	Serial.print("Password: ");
	Serial.println(r_pass);

	Serial.println("Connecting...");

	WiFi.begin(r_ssid, r_pass);

	//timer = timer * blinkRate;
	//while (timer > 0) {
	//	yield(); // To don't stop the "EventLoop" (keep running background tasks) ***SHOULD BE INSIDE A LOOP (do, while, for...)? (or loop() ??) ***

	//	digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN) );
	//	Serial.print(".");

		//if (WiFi.status() == WL_CONNECTED) {
			//timer = 0;

			

			/* LED ON */
		//} else {
		//	if (timer == 1) {
		//
		//		/* LED OFF */
		//
		//		if (tmpSSID != "") {
		//			EEPROM_WRITE(EEPROM_ADDR_CONNECTED_SSID, tmpSSID);
		//			EEPROM_WRITE(EEPROM_ADDR_CONNECTED_PASSWORD, tmpPass);
		//			tmpSSID = "";
		//			tmpPass = "";
		//		}
		//
		//		Serial.print("WiFi no conectado. Status: ");
		//		Serial.println( getNetStatus() );
		//	}
		//
		//}

		//delay(1000 / blinkRate);
		//timer--;
	//}
}

/////////////////////////////////////////////////
///////////////// SCAN NETWORKS /////////////////

String getNetworks(String prefix = "", String suffix = "", String separator = "") {
	
	String networks = "";
	
	for (int i = 0; i < WiFi.scanNetworks(); ++i) {

		//yield(); // DOES NOTHING IN HERE...
		
		// Print SSID and RSSI for each network found
		if(true) { // true to debug
			Serial.print(i + 1);
			Serial.print(": ");
			Serial.print(WiFi.SSID(i));
			Serial.print(" (");
			Serial.print(WiFi.RSSI(i));
			Serial.print("dBm) Ch: ");
			Serial.print(WiFi.channel(i));
			Serial.print(" Encryption [");
			Serial.print(WiFi.encryptionType(i));
			Serial.print("]: ");

			/* Encryption modes */
			switch ( WiFi.encryptionType(i) ) {
				case ENC_TYPE_WEP : 
					Serial.print("WEP");
					break;
				case ENC_TYPE_TKIP : 
					Serial.print("WPA / PSK");
					break;
				case ENC_TYPE_CCMP : 
					Serial.print("WPA2 / PSK");
					break;
				case ENC_TYPE_NONE : 
					Serial.print("open network");
					break;
				case ENC_TYPE_AUTO : 
					Serial.print("WPA / WPA2 / PSK");
					break;

				default:
					Serial.print("???");
					break;
			}

			Serial.println(WiFi.isHidden(i) ? " [hidden]" : "");
		}

		networks += i == 0 ? "" : separator;
		networks += prefix + WiFi.SSID(i) + suffix;
	}

	return networks;
}

/////////////////////////////////////////////////
////////////// GET NETWORK STATUS //////////////

String getNetStatus() {

	switch( WiFi.status() ) {
		case WL_CONNECTED:
			return "Connected";

		case WL_NO_SHIELD:
			return "No WiFi shield present";

		case WL_IDLE_STATUS:
			return "Connecting...";

		case WL_NO_SSID_AVAIL:
			return "SSID unreachable";

		case WL_SCAN_COMPLETED:
			return "Scan completed";

		case WL_CONNECT_FAILED:
			return "Wrong password";

		case WL_CONNECTION_LOST:
			return "Connection lost";

		case WL_DISCONNECTED:
			return "Disconnected";

		// case WL_CONNECT_WRONG_PASSWORD:
			// return "Wrong password";

		default:
			return "Getting status...";
	}

}





///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// WiFi MODES ///////////////////////////////////////////

/////////////////////////////////////////////////
///////////////// STATION MODE /////////////////

void ESP_STATION(ESP8266WebServer &server) {

	if ( WiFi.getMode() == WIFI_AP || WiFi.getMode() == WIFI_AP_STA ) {
		Serial.println("Closing server...");
	}
	
	Serial.println("Initializing as Station...");
	
	server.stop(); ///// DEBUGGING... ???
	server.close(); ///// DEBUGGING... ???
	WiFi.mode(WIFI_STA); ///// DEBUGGING... uncomment if using one of the above
	
	// WiFi.softAPdisconnect(true) ? Serial.println("Server closed.") : Serial.println("Fail closing server."); ///// DEBUGGING... ('true' to remove the AP mode ??? BUT SETS MODE TO NULL ???)
}

/////////////////////////////////////////////////
////////// STATION + ACCESS POINT MODE //////////

// void ESP_AP_STA(ESP8266WebServer *server) {
void ESP_AP_STA(ESP8266WebServer &server, char *ssid_AP, char *password_AP) {

	WiFi.mode(WIFI_AP_STA);

	Serial.println("Starting server...");
	
	WiFi.softAPConfig(server_ip, server_gateway, server_subnet) || Serial.println("Error configuring Access Point."); // On ESP32 you have to wait until event SYSTEM_EVENT_AP_START has fired, before you can set its configuration. // es necesario llamar a WiFi.softAPConfig() antes de WiFi.softAP()
	WiFi.softAP(ssid_AP, password_AP) || Serial.println("Error setting up Access Point.");

	Serial.print("AP dirección IP: ");
	Serial.print(WiFi.softAPIP());
	Serial.println(" (esta IP apunta al WeMos cuando te conectas a su propio WiFi)");
	Serial.print("AP MAC Address: ");
	Serial.println(WiFi.softAPmacAddress());

	server.begin();
	Serial.println("Server started. Access Point SSID: " + String(ssid_AP));
	// server.setNoDelay(true);
}