
/* ===================================================== USO ===================================================== */
/*                                                                                                                 */
/* #include <config_wifi_roy.h>                                                                                    */
/* ESP8266WebServer server(80);                                                                                    */
/*                                                                                                                 */
/* #define EEPROM_ADDR_CONNECTED_SSID 1       // Start saving connected network SSID from this memory address      */
/* #define EEPROM_ADDR_CONNECTED_PASSWORD 30  // Start saving connected network Password from this memory address  */
/* #define AP_SSID "ESP8266_AP"               // Set your own Network Name (SSID)                                  */
/* #define AP_PASSWORD "12345678"             // Set your own password                                             */
/*                                                                                                                 */
/* setup() {                                                                                                       */
/* 	setupWifiConfigServer(server, EEPROM_ADDR_CONNECTED_SSID, EEPROM_ADDR_CONNECTED_PASSWORD);                     */
/* }                                                                                                               */
/*                                                                                                                 */
/* loop() {                                                                                                        */
/* 	wifiConfigLoop(server);                                                                                        */
/* }                                                                                                               */
/*                                                                                                                 */
/* =============================================================================================================== */




#ifndef CONFIG_WIFI_ROY_H
#define CONFIG_WIFI_ROY_H



#include <blink_async.h>
#include <EEPROM_handler.h>
#include <ESP8266WebServer.h>





// THIS CODE WILL BE RETURNED BY THE SERVER WHEN CONNECTED TO ROOT (/)
#define WIFI_ROY_MAIN_1		"<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><style type=\"text\/css\">*{font-family: \"Trebuchet MS\";}*:focus{outline: none;}html, body{background-color: #F1F2F4;font-size: 14px;margin: 0;padding: 0;}.WiFi_selector{background-color: #F1F2F4;border-radius: 5px;box-shadow: 0px 10px 20px 0 rgba(0, 0, 0, 0.1);margin-left: auto;margin-right: auto;margin-top: 100px;padding: 1em;width: min-content;}.WiFi_selector *:not(:first-child){margin-top: 2em;}.WiFi_selector a{color: lightblue;display: block;margin-top: 1em !important;text-decoration: none;width: max-content;transition: all 0.2s;}.WiFi_selector label{display: block;}.WiFi_selector label *:not(:first-child){margin-top: 1em;}.WiFi_selector label input,.WiFi_selector label select{color: #666;}.WiFi_selector label .l_title{color: #999;letter-spacing: 0.2em;}.WiFi_selector input,.WiFi_selector select{-moz-box-sizing: border-box;-webkit-box-sizing: border-box;border-radius: 5px;border: 1px solid #F1F2F4;box-sizing: border-box;min-width: 20em;padding: 1em;transition: all 0.2s;width: 100%;}.WiFi_selector input:hover,.WiFi_selector select:hover{box-shadow: inset 0px 5px 10px 0 rgba(0, 0, 0, 0.1);}.WiFi_selector input:focus,.WiFi_selector select:focus{border-color: LightBlue;}.WiFi_selector .send{background-color: #999;color: #EEE;cursor: pointer;letter-spacing: 0.2em;transition: all 0.2s;}.WiFi_selector .send:hover{background-color: #666;box-shadow: 0px 5px 10px 0 rgba(0, 0, 0, 0.1);}.WiFi_selector .send:focus{background-color: #666;border-color: #F1F2F4;}.WiFi_selector .send:active{box-shadow: inset 0px 5px 10px 0 rgba(0, 0, 0, 0.1);color: LightBlue;}.output{-moz-box-sizing: border-box;-webkit-box-sizing: border-box;background-color: #333;border-radius: 5px;border: none;box-shadow: inset 0px 5px 10px 0 rgba(0, 0, 0, 0.1);box-sizing: border-box;color: #999;padding: 1em;}<\/style><title>WiFi Config<\/title><\/head><body><div class=\"WiFi_selector\"><form action=\"config\" method=\'GET\' target=\"response\" id=\"form\" autocomplete=\"off\"><div><label><div class=\"l_title\">Network Name:<\/div><input list=\"networks\" name=\"ssid\"><\/label><datalist id=\"networks\">"
/* IN BETWEEN (HERE) GOES THE SCANNED NETWORKS */
#define WIFI_ROY_MAIN_2		"<\/datalist><a href=\"?scan=1\">Scan networks...<\/a><\/div><div><label><div class=\"l_title\">Password:<\/div><input type=\"password\" name=\"password\"><\/label><\/div><div><input type=\"submit\" name=\"submit\" class=\"send\" value=\"CONNECT\"><\/div><div class=\"output\"><span style=\"color: LightBlue;\" id=\"outputTxt\">No Js<\/span><noscript><iframe src=\"\/status\/html\" id=\'response\' name=\'response\' style=\"border:none;\"><\/iframe><br><br><small><b>Your browser does not support JavaScript!<\/b><br>Manually click to get the connection status.<\/small><\/noscript><\/div><\/form><\/div><script>const form=document.getElementById(\"form\"),opt=document.getElementById(\"outputTxt\");function ajaxReq(){return window.XMLHttpRequest?new XMLHttpRequest:window.ActiveXObject?new ActiveXObject(\"Microsoft.XMLHTTP\"):(alert(\"Browser does not support XMLHTTP.\"),!1)}function getStatus(){const t=ajaxReq();t.open(\"GET\",\"\/status\/json\",!0),t.send(),t.onreadystatechange=(()=>{if(opt.innerHTML=\"Getting status...\",4==t.readyState)if(t.status>=200&&t.status<300)try{const e=JSON.parse(t.response);\"Connected\"==e.status?opt.innerHTML=`${e.status} to ${e.info.ssid}`:opt.innerHTML=e.status,setTimeout(getStatus,1e3)}catch(e){opt.innerHTML=\"Error. Check console.\",console.error(e),console.log(t.response)}else opt.innerHTML=\"Error connecting to AP.\",setTimeout(getStatus,5e3)})}form.addEventListener(\"submit\",t=>{t.preventDefault(),opt.innerHTML=\"Sending data...\";const e=ajaxReq();e.open(\"GET\",encodeURI(`\/config?ssid=${form.ssid.value}&password=${form.password.value}`),!0),e.send(),e.onreadystatechange=(()=>{4==e.readyState&&(e.status<200||e.status>=300)&&(console.log(\"Error sending data.\"),opt.innerHTML=\"Error sending data.\")})}),window.onload=(()=>{getStatus()});<\/script><\/body><\/html>"

// THIS CODE WILL BE RETURNED FOR EACH FOUND NETWORK
#define WIFI_ROY_FOUND_NETWORK_PRE			"<option value=\""
#define WIFI_ROY_FOUND_NETWORK_POST			"\">"
#define WIFI_ROY_FOUND_NETWORK_SEPARATOR	"\r\n"

// COMMON CSS FILE FOR NO-JAVASCRIPT-ALLOWED-PAGE
#define WIFI_ROY_NO_JS_CSS	"*{font-family: \"Trebuchet MS\";}html, body{font-size: 14px;margin: 0;padding: 0;color: lightblue;}a{background-color: #f1f2f4;border-radius: 5px;color: #666;display: block;margin: 1em;padding: 0.5em;text-decoration: none;width: max-content;transition: all 0.2s;}a:hover{background-color: LightBlue;color: #333;}"

// THIS PAGE RETURNS THE CONNECTION STATUS OF THE DEVICE WHEN THERE IS NO JAVASCRIPT ALLOWED
#define WIFI_ROY_STATUS_HTML_1	"<!DOCTYPE html><html><head><meta charset=\"utf-8\"><noscript><meta http-equiv=\"refresh\" content=\"1\"><\/noscript><title><\/title><style type=\"text\/css\">"
/* THEN WIFI_ROY_NO_JS_CSS */
#define WIFI_ROY_STATUS_HTML_2	"<\/style><\/head><body>"
/* THEN getNetStatus() + (WiFi.isConnected() ? (" to " + EEPROM_READ(1) ) : "" ) */
#define WIFI_ROY_STATUS_HTML_3	"<br><a href=\"\/status\/html\">Click here to update status.<\/a><\/body><\/html>"

// THIS PAGE GETS THE SSID AND PASSWORD PASSED BY THE USER TO THE SERVER
#define WIFI_ROY_CONFIG_1		"<!DOCTYPE html><html><head><meta charset=\"utf-8\"><noscript><meta http-equiv=\"refresh\" content=\"3;URL=\'\/status\/html\'\"><\/noscript><title><\/title><style type=\"text\/css\">"
/* THEN WIFI_ROY_NO_JS_CSS */
#define WIFI_ROY_CONFIG_2		"<\/style><\/head><body>Data received!<br><a href=\"\/status\/html\">Click here to get status.<\/a><\/body><\/html>"





void setupWifiConfigServer(ESP8266WebServer &server, int EEPROM_ADDR_FOR_SSID, int EEPROM_ADDR_FOR_PASSWORD);

void wifiConfigLoop(ESP8266WebServer &server);

void connectWiFi();

bool wifiStatChanged(byte &compareVar);

String getNetworks(String prefix, String suffix, String separator);

String getNetStatus();

void ESP_STATION(ESP8266WebServer &server);

void ESP_AP_STA(ESP8266WebServer &server, char *ssid_AP, char *password_AP);





#endif